export interface VulnerabilityPattern {
    pattern: string;
    description: string;
    severity: 'error' | 'warning' | 'info';
    languages: string[];
    quickFix?: {
        title: string;
        fix: (line: string) => string;
    };
}

export const vulnerabilityPatterns: VulnerabilityPattern[] = [
    // API Keys and Credentials
    {
        pattern: '(?i)(?:api_key|apikey|secret|token)\\s*[:=]\\s*["\']?[A-Za-z0-9]{16,64}["\']?',
        description: 'Exposed API key or credential',
        severity: 'error',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Move to environment variable',
            fix: (line: string) => {
                const match = line.match(/(\w+)\s*[:=]\s*["']?([^"']+)["']?/);
                if (match) {
                    const language = getCurrentLanguage();
                    switch (language) {
                        case 'python':
                            return `${match[1]} = os.getenv('${match[1].toUpperCase()}')`;
                        case 'javascript':
                        case 'typescript':
                            return `${match[1]} = process.env.${match[1].toUpperCase()}`;
                        case 'java':
                            return `${match[1]} = System.getenv("${match[1].toUpperCase()}")`;
                        case 'csharp':
                            return `${match[1]} = Environment.GetEnvironmentVariable("${match[1].toUpperCase()}")`;
                        case 'php':
                            return `${match[1]} = getenv('${match[1].toUpperCase()}')`;
                        case 'ruby':
                            return `${match[1]} = ENV['${match[1].toUpperCase()}']`;
                        case 'go':
                            return `${match[1]} = os.Getenv("${match[1].toUpperCase()}")`;
                        default:
                            return line;
                    }
                }
                return line;
            }
        }
    },
    // Hardcoded Passwords
    {
        pattern: '(?i)password\\s*[:=]\\s*["\']?[^"\']+["\']?',
        description: 'Hardcoded password',
        severity: 'error',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Move to environment variable',
            fix: (line: string) => {
                const match = line.match(/(\w+)\s*[:=]\s*["']?([^"']+)["']?/);
                if (match) {
                    const language = getCurrentLanguage();
                    switch (language) {
                        case 'python':
                            return `${match[1]} = os.getenv('${match[1].toUpperCase()}')`;
                        case 'javascript':
                        case 'typescript':
                            return `${match[1]} = process.env.${match[1].toUpperCase()}`;
                        case 'java':
                            return `${match[1]} = System.getenv("${match[1].toUpperCase()}")`;
                        case 'csharp':
                            return `${match[1]} = Environment.GetEnvironmentVariable("${match[1].toUpperCase()}")`;
                        case 'php':
                            return `${match[1]} = getenv('${match[1].toUpperCase()}')`;
                        case 'ruby':
                            return `${match[1]} = ENV['${match[1].toUpperCase()}']`;
                        case 'go':
                            return `${match[1]} = os.Getenv("${match[1].toUpperCase()}")`;
                        default:
                            return line;
                    }
                }
                return line;
            }
        }
    },
    // SQL Injection
    {
        pattern: '(?i)(?:SELECT|INSERT|UPDATE|DELETE)\\s+.*\\s+FROM\\s+.*\\s+WHERE\\s+.*\\+\\s*["\']',
        description: 'Potential SQL injection vulnerability',
        severity: 'error',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Use parameterized queries',
            fix: (line: string) => {
                const language = getCurrentLanguage();
                switch (language) {
                    case 'python':
                        return line.replace(/\+.*["']/, '?');
                    case 'javascript':
                    case 'typescript':
                        return line.replace(/\+.*["']/, '?');
                    case 'java':
                        return line.replace(/\+.*["']/, '?');
                    case 'csharp':
                        return line.replace(/\+.*["']/, '@param');
                    case 'php':
                        return line.replace(/\+.*["']/, '?');
                    case 'ruby':
                        return line.replace(/\+.*["']/, '?');
                    case 'go':
                        return line.replace(/\+.*["']/, '?');
                    default:
                        return line;
                }
            }
        }
    },
    // XSS Vulnerabilities
    {
        pattern: '(?i)innerHTML\\s*=\\s*["\']?[^"\']+["\']?',
        description: 'Potential XSS vulnerability',
        severity: 'warning',
        languages: ['javascript', 'typescript'],
        quickFix: {
            title: 'Use textContent instead',
            fix: (line: string) => {
                return line.replace('innerHTML', 'textContent');
            }
        }
    },
    // Unsafe File Operations
    {
        pattern: '(?i)(?:open|readFile|writeFile)\\s*\\([^)]*\\)',
        description: 'Unsafe file operation without proper error handling',
        severity: 'warning',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Add try-catch block',
            fix: (line: string) => {
                const language = getCurrentLanguage();
                switch (language) {
                    case 'python':
                        return `try:\n    ${line}\nexcept Exception as e:\n    print(f'File operation failed: {e}')`;
                    case 'javascript':
                    case 'typescript':
                        return `try {\n    ${line}\n} catch (error) {\n    console.error('File operation failed:', error);\n}`;
                    case 'java':
                        return `try {\n    ${line}\n} catch (IOException e) {\n    e.printStackTrace();\n}`;
                    case 'csharp':
                        return `try {\n    ${line}\n} catch (Exception ex) {\n    Console.WriteLine($"File operation failed: {ex.Message}");\n}`;
                    case 'php':
                        return `try {\n    ${line}\n} catch (Exception $e) {\n    error_log("File operation failed: " . $e->getMessage());\n}`;
                    case 'ruby':
                        return `begin\n    ${line}\nrescue => e\n    puts "File operation failed: #{e.message}"\nend`;
                    case 'go':
                        return `if err := ${line}; err != nil {\n    log.Printf("File operation failed: %v", err)\n}`;
                    default:
                        return line;
                }
            }
        }
    },
    // Missing Input Validation
    {
        pattern: '(?i)(?:input|prompt|readline)\\s*\\([^)]*\\)',
        description: 'Missing input validation',
        severity: 'warning',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Add input validation',
            fix: (line: string) => {
                const language = getCurrentLanguage();
                switch (language) {
                    case 'python':
                        return `${line}\nif not input.strip():\n    raise ValueError('Input cannot be empty')`;
                    case 'javascript':
                    case 'typescript':
                        return `${line}\nif (!input.trim()) {\n    throw new Error('Input cannot be empty');\n}`;
                    case 'java':
                        return `${line}\nif (input.trim().isEmpty()) {\n    throw new IllegalArgumentException("Input cannot be empty");\n}`;
                    case 'csharp':
                        return `${line}\nif (string.IsNullOrWhiteSpace(input)) {\n    throw new ArgumentException("Input cannot be empty");\n}`;
                    case 'php':
                        return `${line}\nif (empty(trim($input))) {\n    throw new Exception('Input cannot be empty');\n}`;
                    case 'ruby':
                        return `${line}\nif input.strip.empty?\n    raise ArgumentError, 'Input cannot be empty'\nend`;
                    case 'go':
                        return `${line}\nif strings.TrimSpace(input) == "" {\n    return fmt.Errorf("input cannot be empty")\n}`;
                    default:
                        return line;
                }
            }
        }
    },
    // Insecure HTTP
    {
        pattern: '(?i)http://',
        description: 'Insecure HTTP connection',
        severity: 'warning',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Use HTTPS instead',
            fix: (line: string) => {
                return line.replace('http://', 'https://');
            }
        }
    },
    // Debug Statements
    {
        pattern: '(?i)(?:console\\.log|print|debugger)',
        description: 'Debug statement in production code',
        severity: 'info',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Remove debug statement',
            fix: (line: string) => {
                return '';
            }
        }
    },
    // Weak Cryptography
    {
        pattern: '(?i)(?:md5|sha1)\\s*\\([^)]*\\)',
        description: 'Weak cryptographic algorithm',
        severity: 'warning',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Use stronger algorithm',
            fix: (line: string) => {
                return line.replace(/md5|sha1/, 'sha256');
            }
        }
    },
    // Insecure Deserialization
    {
        pattern: '(?i)(?:eval|JSON\\.parse|unserialize)\\s*\\([^)]*\\)',
        description: 'Potential insecure deserialization',
        severity: 'error',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Use safe deserialization',
            fix: (line: string) => {
                const language = getCurrentLanguage();
                switch (language) {
                    case 'python':
                        return line.replace(/eval/, 'ast.literal_eval');
                    case 'javascript':
                    case 'typescript':
                        return line.replace(/eval/, 'JSON.parse');
                    case 'java':
                        return line.replace(/eval/, 'ObjectMapper().readValue');
                    case 'csharp':
                        return line.replace(/eval/, 'JsonSerializer.Deserialize');
                    case 'php':
                        return line.replace(/eval/, 'json_decode');
                    case 'ruby':
                        return line.replace(/eval/, 'JSON.parse');
                    case 'go':
                        return line.replace(/eval/, 'json.Unmarshal');
                    default:
                        return line;
                }
            }
        }
    },
    // Command Injection
    {
        pattern: '(?i)(?:exec|system|spawn|child_process)\\s*\\([^)]*\\)',
        description: 'Potential command injection vulnerability',
        severity: 'error',
        languages: ['python', 'javascript', 'typescript', 'java', 'csharp', 'php', 'ruby', 'go'],
        quickFix: {
            title: 'Use safe command execution',
            fix: (line: string) => {
                const language = getCurrentLanguage();
                switch (language) {
                    case 'python':
                        return line.replace(/exec|system/, 'subprocess.run');
                    case 'javascript':
                    case 'typescript':
                        return line.replace(/exec|system/, 'child_process.execFile');
                    case 'java':
                        return line.replace(/exec|system/, 'ProcessBuilder');
                    case 'csharp':
                        return line.replace(/exec|system/, 'Process.Start');
                    case 'php':
                        return line.replace(/exec|system/, 'escapeshellcmd');
                    case 'ruby':
                        return line.replace(/exec|system/, 'Open3.capture2');
                    case 'go':
                        return line.replace(/exec|system/, 'exec.Command');
                    default:
                        return line;
                }
            }
        }
    }
];

function getCurrentLanguage(): string {
    // This function would be implemented to get the current language from VSCode
    // For now, we'll return a default
    return 'javascript';
} 